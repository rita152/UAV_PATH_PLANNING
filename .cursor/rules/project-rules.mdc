---
alwaysApply: true
priority: 100
---

# 项目开发规则

## 🚨 优先级1 - 严格禁止规则（必须遵守）

### 1.1 文档生成限制
- **除非用户明确要求，否则不生成任何markdown文件**
- 不主动创建任何 `*.md` 文档
- 只在用户直接提出需求时才生成markdown文档

### 1.2 Git提交权限控制
- **严禁私自进行代码提交**
- 每次代码修改完成后，必须先询问用户是否进行提交
- 等待用户确认后才能执行 `git commit` 操作
- 用户确认提交后，直接执行推送到GitHub的操作

### 1.3 .gitignore文件保护
- **不允许修改 `.gitignore` 文件**
- `.gitignore` 文件由用户管理，AI不得修改
- 严格遵守现有的 `.gitignore` 规则

## ⚠️ 优先级2 - 强制执行规则（每次必做）

### 2.1 Git提交规范
- 使用 `git add .` 进行文件添加
- 严格遵守 `.gitignore` 文件规则
- 提交信息格式：
  ```
  <type>: <简洁的标题>
  
  <简洁的内容描述>
  ```
- 提交标题与内容风格保持简洁一致

### 2.2 Git提交类型
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `refactor`: 代码重构
- `style`: 代码格式调整
- `test`: 测试相关
- `chore`: 其他修改

### 2.3 提交后自动推送
- 提交完成后，立即执行 `git push` 推送到GitHub
- 推送命令: `git push origin <当前分支>`

### 2.4 README.md维护
- **每次代码修改完成后，必须更新根目录的 README.md 文档**
- 更新内容包括：新增功能、修改说明、使用方法等
- 保持README.md的准确性和实时性

### 2.5 Conda环境管理
- **每次运行代码前，必须先激活 conda 环境 `UAV_PATH_PLANNING`**
- 激活命令: `conda activate UAV_PATH_PLANNING`
- 确保在正确的环境中运行代码
- 如果环境不存在，提示用户创建环境

## 📌 优先级3 - 项目结构规则

### 3.1 文档层级管理
- **只维护根目录的项目级别 README.md 文档**
- 不生成模块级别的markdown文档
- 所有文档说明集中在根目录README.md中

### 3.2 项目结构
```
UAV_PATH_PLANNING/
├── README.md              # 唯一的项目文档（项目级别）
├── .gitignore            # Git忽略规则（不可修改）
├── .cursor/              # Cursor配置
│   └── rules/           # 开发规则
├── algorithm/           # 算法实现
├── rl_env/             # 强化学习环境
├── utils/              # 工具函数
├── assignment/         # 仿真组件
└── main_SAC.py         # 主程序入口
```

## 📋 优先级4 - 代码开发规范

### 4.1 Python代码风格
- 遵循PEP 8规范
- 使用4个空格缩进
- 函数和类添加docstring
- 关键逻辑添加注释

### 4.2 路径管理
- 禁止硬编码绝对路径
- 使用相对路径或配置文件
- 路径使用 `os.path.join()` 拼接

### 4.3 超参数管理
- 超参数在文件开头集中定义
- 使用全大写命名常量
- 添加注释说明

## 🔄 工作流程（严格按照顺序执行）

### 步骤0: 环境准备（运行代码时）
- **激活 conda 环境**: `conda activate UAV_PATH_PLANNING`
- 确认环境已正确激活
- 如果需要安装依赖，在激活环境后执行

### 步骤1: 代码修改
- 根据用户需求修改代码
- 确保代码质量和规范性

### 步骤2: 更新README.md
- **必须更新根目录的README.md文档**
- 记录本次修改的内容和影响

### 步骤3: 询问提交
- **询问用户**: "代码修改已完成，README.md已更新。是否提交代码？"
- 等待用户确认

### 步骤4: 执行提交（用户确认后）
```bash
git add .
git commit -m "<type>: <简洁标题>"
```

### 步骤5: 推送到GitHub
```bash
git push origin <branch>
```

## ⛔ 禁止行为清单

1. ❌ 未经用户要求生成markdown文件
2. ❌ 私自提交代码（未询问用户）
3. ❌ 修改.gitignore文件
4. ❌ 生成模块级别的markdown文档
5. ❌ 跳过README.md更新步骤
6. ❌ 提交后不推送到GitHub
7. ❌ 使用verbose的提交信息（应保持简洁）
8. ❌ 硬编码绝对路径

## ✅ 必须行为清单

1. ✅ 运行代码前激活 conda 环境 `UAV_PATH_PLANNING`
2. ✅ 代码修改完成后更新README.md
3. ✅ 询问用户是否提交代码
4. ✅ 使用 `git add .` 添加文件
5. ✅ 提交信息简洁一致
6. ✅ 严格遵守.gitignore规则
7. ✅ 提交后直接推送到GitHub
8. ✅ 只维护根目录README.md

## 📝 示例场景

### 场景1: 运行代码的完整流程
```
1. 激活环境: conda activate UAV_PATH_PLANNING
2. 运行代码: python main_SAC.py
```

### 场景2: 修改代码后的完整流程
```
1. 修改代码文件（如 main_SAC.py）
2. 更新 README.md 记录修改
3. 询问: "代码修改已完成，README.md已更新。是否提交代码？"
4. [等待用户回复 "是" 或确认]
5. 执行:
   git add .
   git commit -m "feat: 添加xxx功能"
   git push origin main
```

### 场景3: 用户要求生成文档
```
用户: "创建一个API文档"
AI: [可以生成] 因为用户明确要求
```

### 场景4: 主动想生成文档
```
AI内心: "我想创建一个模块说明文档"
AI行动: [不生成] 因为用户没有明确要求
```

## 🎯 优先级总结

**优先级1（P1）** - 违反即停止：
- 不私自生成markdown文件
- 不私自提交代码
- 不修改.gitignore

**优先级2（P2）** - 每次必做：
- 运行代码前激活conda环境
- 更新README.md
- 询问是否提交
- 提交后推送到GitHub
- 使用简洁的提交信息

**优先级3（P3）** - 项目规范：
- 只维护根目录README.md
- 不生成模块级别文档

**优先级4（P4）** - 代码质量：
- 遵循代码规范
- 良好的注释和文档

---

**最后更新**: 2025-10-28  
**规则版本**: v1.0
